origin   skunkworks.everybitcounts.net2006
artifact relish_test_suite
package  basic_tests 

""" 
 test_packages.rel

 Test package importing, compiling, loading, linking.
"""

import
   machines/vehicles
   relish.pl2012/things/pkg/physical_objects as phys
   people

TEST_TIME_METHODS = true
TEST_GOROUTINES = false

//
// if gt radius MAX_RADIUS
//    radius = MAX_RADIUS

MAX_RADIUS = 10


circleCircumference radius Float > Float
"""
 Calculates the circumference of a circle of a given radius.
"""
   => times 2 (times phys.PI radius) 


circleArea radius Float > Float
"""
 Calculates the area of a circle of a given radius.
"""
   if gt radius MAX_RADIUS
      radius = MAX_RADIUS
   r2 = times radius radius
   => times phys.PI r2


circleProperty radius Float prop String > Float
"""
 If prop is "a" calculates the area otherwise the circumference of a circle.
"""
   if eq "a" prop
      => circleArea radius
   else
      => circleCircumference radius


argTest
   a Float
   b String
   bar Int = 0
   ...v [] String
> 
   Float   
"""
 Test arguments to functions.
"""
   => a


listTest
   a Int
   b Int
   c Int
>
   [] Int
"""
 Puts some items in a list and returns the list.
"""   
   theList = [a b c]Int
   => theList





spew mx Mutex chin InChannel inNum Int chout OutChannel outNum Int n Int
"""
 Exchanges data on channels and prints out what it is doing.
"""
   i = 0
   while 1
      i = plus i 1 
      lock mx
      print i "about to send" n "to ch" outNum
      unlock mx      
      chout <- n  
      lock mx 
      print i "sent" n "to ch" outNum
      print i "about to receive something from ch" inNum      
      unlock mx      
      m = <- chin
      lock mx    
      print i "got" m "from ch" inNum
      unlock mx


main
"""
 Main program.
"""
   print circleProperty 9.0 "a"
   print circleProperty 9.0 "c"

   car1 = vehicles.Car
   car1.lat = 49.243
   car1.long = 123.761  // - operator is not handled yet
   car1.vin = "V0E44R8139WT6214A"

   truck1 = vehicles.PickupTruck
   truck1.lat = 49.265
   truck1.long = 123.778
   truck1.bedLength = 8.3

   engine1 = vehicles.Engine
   engine1.horsepower = 120
   car1.engine = engine1

   wheel1 = vehicles.Wheel
   wheel1.num = 1
   wheel2 = vehicles.Wheel
   wheel2.num = 2
   wheel3 = vehicles.Wheel
   wheel3.num = 3
   wheel4 = vehicles.Wheel
   wheel4.num = 4

   car1.wheels += wheel4  // Also NOT HANDLING // comment at beginning of indented line !!!
   car1.wheels += wheel3  

   if not exists "JSS 994"
      dub car1 "JSS 994"  // Moved this after some car1.wheels += to test persisting collection attr with owner obj
      dub truck1 "JAT 057"

   car1.wheels += wheel1  
   car1.wheels += wheel2  

   car2 = summon "JSS 994"  // Was Car summon - should it be: Car: summon

   print car2.lat
   print car2.vin

   print "car2.wheels:"

   for i wheel in car2.wheels
      print "wheel[" i "] =" wheel.num


   car2.wheels -= wheel2
   car2.wheels -= wheel3

   print "After removing wheels 2 and 3 from car2.wheels, car2.wheels is:"

   for i wheel in car2.wheels
      print "wheel[" i "] =" wheel.num

   

   bigWheels = []vehicles.Wheel "num > 2"

   for i wheel in bigWheels
      print "bigWheels[" i "] =" wheel.num

   spares = [wheel1 wheel2 wheel3]vehicles.Wheel

   print "spares[1] =" spares[1].num

   vcls = []vehicles.Vehicle "lat > 48" 
   for vhcl in vcls 
      print "boo"
      print vhcl.lat vhcl.long

   a = """
This is the very first
multi-line string in relish!!
"""

   print a

   b = fill """
This is the #%s
multi-line %s string in relish!!
"""
            2
            "substitutable"

   print b

   if not 0
      print "0 is zero"
   else
      print "0 is non-zero"

   print not bigWheels

   smallWheels = []vehicles.Wheel

   print not smallWheels

   print "Length 18-byte string =" (len "Well how big am I?")
   print "len bigWheels =" (len bigWheels)
   print "len smallWheels =" (len smallWheels)
   print "len car2.wheels =" (len car2.wheels)

   lastOne = and 2 "three" true "five"
   print lastOne

   firstOne = or 0 0.0 "" "this one" "is true"
   print firstOne

   print plus 2 2

   print plus 2 2.3

   print minus 2.3 2

   print minus 3 2

   print div 8 3

   print div 8 3.0

   print mod 7 3


   driver1 = people.Person
   driver1.firstName = "Joe"
   driver1.lastName = "Armstrong"
   driver1.dateOfBirth err = Time "1983-09-25T22:13:45.875Z"
   if err
      print err

   print driver1.dateOfBirth

   passenger1 = people.Person
   passenger1.firstName = "Alice"
   passenger1.lastName = "Wong"
   passenger1.dateOfBirth err = Time "1990-02-13 22:13:45 America/Los_Angeles"   
   if err
      print err   

   passenger2 = people.Person
   passenger2.firstName = "Ernie"
   passenger2.lastName = "Kovacs"
   passenger2.dateOfBirth err = Time "February 3, 1969 8:08am -0700 PDT" "January 2, 2006 3:04pm -0700 MST"    
   if err
      print err   

   driver2 = people.Person
   driver2.firstName = "Jane"
   driver2.lastName = "Sterrit"
   driver2.dateOfBirth err = Time 1983 5 27 15 4 0 0 "Local"
   if err
      print err   

   car2.driver = driver1
   car2.passengers += passenger1
   car2.passengers += passenger2

   for person in car2.passengers
      print person.firstName person.lastName person.dateOfBirth

   car3 = passenger2.vehicleRiddenIn
   print car3.vin     

   print car2.passengers[1].firstName

   truck1.driver = driver2
   
   youngsters = []people.Person "dateOfBirth > '1982-09-23'"

   for person in youngsters
      print person.firstName person.lastName

   s1 = "How now brown cow?"
   
   s2 = "bro"

   s3 = "世界Hello"

   s4 = "one"
   s5 = "two"
   s6 = "three"
   count = [s4 s5 s6]String
   print join count ","
   print join count
   assortment = ["one" 2 3.0 "four" false]Any
   print join assortment "|"

   print first s1 2
   print first s1 30
   print last s1 4
   print last s1 30
   print replace s1 "ow" "ew"
   print replace s1 "ow" "ew" 1   
   print hasPrefix s1 s2
   print hasPrefix s1 "How"
   print hasSuffix s1 "cow"
   print hasSuffix s1 "cow?"
   print cat s1 s2 " " driver1.firstName
   print index s1 s2
   print lastIndex s1 "ow"
   print slice s1 4 7
   print slice s1 0 (neg 1)
   print slice s1 1 (neg 5)  
   print slice s1 8
   print first s3 1
   print first s3 2
   print first s3 3
   print len s3
   print numCodePoints s3
   print index s3 "世界"
   print index s3 "界"

   print base64Hash s3

   print hexHash s3   

   if TEST_TIME_METHODS
      print driver1.dateOfBirth
      t2 = 
         plus 
            driver1.dateOfBirth 
            plus (hours 50) (minutes 30)     
      t3 = plus driver1.dateOfBirth (duration 50 30)
      t4 = addDate driver1.dateOfBirth 1 0 2      
      print t2
      print t3
      print t4
      print minus t3 t2
      print minus t3 (hours 50)    
      print now "Local"
      now1 = now "UTC"    
      sleep seconds 3
      ns = since now1 
      print secondsEquivalentOf ns
      h m s ns = timeParts ns
      print h m s ns                

   if TEST_GOROUTINES

      // If executed, this section will cause the test program to keep running
      // and spewing output to stdout.

      ch1 = Channel
               1
      ch2 = Channel
      mx = Mutex

      go spew mx ch1 1 ch2 2 5

      spew mx ch2 2 ch1 1 3

